"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory;
  } else {
    // 绑定到Function上
    Function.prototype.dog_C = factory;
  }
})(void 0, function (ARGS) {
  if (Object.prototype.toString.call(ARGS) !== '[object Arguments]') {
    throw new Error("\n\u9884\u671F\u7C7B\u578B[object Arguments] \n\u6536\u5230\u7C7B\u578B ".concat(Object.prototype.toString.call(ARGS)));
  }

  function objString(obj, isRequirement) {
    var objType = Object.prototype.toString.call(obj);
    var sing;

    if (objType === '[object Array]') {
      var singArray = [];

      for (var i in obj) {
        singArray.push(objString(obj[i]));
      }

      sing = "[".concat(singArray.join(','), "]");
    } else if (objType === '[object Object]') {
      var singObj = [];

      for (var _i in obj) {
        singObj.push("".concat(_i, ":").concat(objString(obj[_i])));
      }

      sing = "{".concat(singObj.join(','), "}");
    } else if (isRequirement && objType === "[object Function]") {
      sing = "".concat(obj.name || 'function');
    } else {
      sing = String(obj);
    }

    return sing;
  }

  function error(term, value, type) {
    if (term) return;
    throw new Error("\n\u53C2\u6570\u9884\u671F=".concat(objString(type, true), " \n\u53C2\u6570\u6536\u5230=").concat(objString(value)));
  }

  function objectVerify(value, type) {
    if (value === undefined) return false;

    for (var i in type) {
      if (type[i] === null) {// if (value[i] === undefined) return
        // if (value[i] !== type[i]) return
      } else if (type[i] === undefined) {
        return false;
      } else {
        error(verify(value[i], type[i]), value[i], type[i]);
      }
    }

    return true;
  }

  function funcVerify(value, type) {
    if (!type.name || type.name === 'check') return type(value);else if (type.name === 'Boolean') return typeof value === 'boolean';else if (type.name === 'String') return typeof value === 'string';else if (type.name === 'Number') return typeof value === 'number';else if (type.name === 'Object') return _typeof(value) === 'object';else if (type.name === 'Function') return typeof value === 'function';else if (type.name === 'Symbol') return _typeof(value) === 'symbol';else if (type.name === 'Array') return Object.prototype.toString.call(value) === '[object Array]';else if (type.name === 'Date') return Object.prototype.toString.call(value) === '[object Date]';else {
      return value && value.name === type.name;
    } // 如果都是函数的话就判断函数名字
  }

  function verify(value, type) {
    switch (_typeof(type)) {
      case 'object':
        return objectVerify(value, type);

      case 'function':
        return funcVerify(value, type);

      case 'number':
      case 'string':
      case 'boolean':
      case 'undefined':
      default:
        return type === value;
    }
  }

  var verification = function verification() {
    for (var i in arguments) {
      error(verify(ARGS[i], arguments[i]), ARGS[i], arguments[i]);
    }

    return verification;
  };

  return verification;
});
